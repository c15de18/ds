# Step 1: Install libraries if not already
!pip install pandas scikit-learn matplotlib seaborn

# Step 2: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 3: Load the dataset
# Assuming your CSV file is 'BostonHousing.csv'
df = pd.read_csv('BostonHousing.csv')

# Step 4: Check for missing values
print(df.isnull().sum())

# Step 5: Handle missing values
# Option 1: Drop rows with any NaN values
df = df.dropna()

# Option 2: (Alternative) You can also fill missing values instead of dropping:
# df = df.fillna(df.mean())

# Step 6: Prepare features and target
X = df.drop('MEDV', axis=1)  # Features
y = df['MEDV']               # Target

# Step 7: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 8: Train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 9: Make predictions
y_pred = model.predict(X_test)

# Step 10: Evaluate the model
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("Root Mean Squared Error (RMSE):", np.sqrt(mean_squared_error(y_test, y_pred)))
print("R2 Score:", r2_score(y_test, y_pred))

# Step 11: Visualize Actual vs Predicted Prices
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', lw=2)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted House Prices')
plt.show()
